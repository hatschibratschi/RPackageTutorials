---
title: "STATcubeR and Rdeck packages"
format:
  html:
    toc: true
    code-tools: true
    code-link: true
    self-contained: true
---

This page shows you how to download data with the [STATcubeR](https://github.com/statistikat/STATcubeR/ "github STATcubeR") package and visualize the data with ggplot and [Rdeck](https://github.com/qfes/rdeck "github Rdeck") packages.

## Packages

### Install packages

First, install the STATcubeR-package and Rdeck-package from github with:

```{r installSTATcubeR, eval=FALSE}
# run only if the packages are not installed yet
install.packages('remotes')
remotes::install_github("statistikat/STATcubeR")
remotes::install_github("qfes/rdeck")
```

### Load packages

```{r loadPackages}
library(STATcubeR)
library(rdeck)
library(data.table)
library(stringr)
library(utils)
library(ggplot2)
library(sf)
```

## Load data

### Get population data

[STATcube](https://statcube.at/) is a tool by [STATISTIK AUSTRIA](https://www.statistik.at) to make pivot-like data queries against most of the data from Statistik Austria (API keys required), but some tables are free to access via the open data portal [data.statistik.gv.at](https://data.statistik.gv.at/web/).

We want to compare two years of the Austrian population for each of the 2117 communes, for each sex (m/f) and each age group (0 to 99).

```{r loadPopData}
popDataFile = "data/popData.rdata"
# check if the files are available on your disk
if(!file.exists(popDataFile)){
  pop2002 = od_table("OGD_bevstandjbab2002_BevStand_2002")
  pop2021 = od_table("OGD_bevstandjbab2002_BevStand_2021")
  save(pop2002, pop2021, file = popDataFile)
} else {
  load(popDataFile)
}
# check if data is available
paste('dim is', paste(dim(pop2002$data), collapse = ', '))
```

### Load commune shape file

Load the two shape files from [data catalog of Statistik Austria](https://data.statistik.gv.at/web/catalog.jsp#collapse4) 

* communes [data.statistik.gv.at](https://data.statistik.gv.at/web/meta.jsp?dataset=OGDEXT_GEM_1) 
* and NUTS2 regions in austria [data.statistik.gv.at](https://data.statistik.gv.at/web/meta.jsp?dataset=OGDEXT_NUTS_1)

We also simplify the shape-files with `st_simplify()` (faster rendering and smaller object size) and plot them.

```{r downloadCommuneShapeAndUnzip}
downloadUnZipShp = function(url, shpFile, rDataFile){
  zipPath = file.path('data', basename(url))
  shpDir = file.path('data', tools::file_path_sans_ext(basename(url)))
  shpPath = file.path(shpDir, shpFile)
  shpRdata = file.path('data', rDataFile)
  # unzip file if shp does not exist
  if(!file.exists(shpPath)){
    # download zip-file if it does not exist
    if(!file.exists(zipPath)){
      download.file(url = url
                    , destfile = zipPath)
    }
    # unzip file if not unzipped
    utils::unzip(zipfile = zipPath
                 , exdir = shpDir)
  }
}

createLoadShp = function(shpRdata, shpPath, shpObjName){
  if(!file.exists(shpRdata)){
    shp = sf::st_read(dsn = shpPath)
    # simplify
    shp = sf::st_simplify(x = shp, dTolerance = 20)
    assign(shpObjName, shp) # object should not be names shp in the saved file
    save(list = shpObjName, file = shpRdata)
  } else {
    load(file = shpRdata)
  }
  get(shpObjName)
}

loadShp = function(url, shpFile, rDataFile){
  shpDir = file.path('data', tools::file_path_sans_ext(basename(url)))
  shpPath = file.path(shpDir, shpFile)
  shpRdata = file.path('data', rDataFile)
  shpObjName = tools::file_path_sans_ext(rDataFile)
  
  downloadUnZipShp(url = url, shpFile = shpFile, rDataFile = rDataFile)
  createLoadShp(shpRdata = shpRdata, shpPath = shpPath, shpObjName = shpObjName)
}

# commune shp
communeShp = loadShp(url = 'https://data.statistik.gv.at/data/OGDEXT_GEM_1_STATISTIK_AUSTRIA_20220101.zip'
                 , shpFile = 'STATISTIK_AUSTRIA_GEM_20220101.shp'
                 , rDataFile = 'communeShp.rdata')
# nuts3 shp
nuts2shp = loadShp(url = 'https://data.statistik.gv.at/data/OGDEXT_NUTS_1_STATISTIK_AUSTRIA_NUTS2_20160101.zip'
                 , shpFile = 'STATISTIK_AUSTRIA_NUTS2_20160101.shp'
                 , rDataFile = 'nuts2shp.rdata')
```

```{r loadCommuneShpToSf}
# simple plotting
plot(nuts2shp$geometry, lwd = 1.5, main='Austrian communes and NUTS2 regions')
plot(communeShp$geometry, lwd = 0.5, add = TRUE)
```

## Prepare population data

Now we want to convert the two pop-objects from the Statistik Austria-format to data.table with `setDT()` objects and calculate the decrease or increase of population for each commune with `data.table()`.

The following function tidies up the pop data.

```{r functionTidyPop}
tidyPop = function(data){
  # convert to data.table object
  data = setDT(data)
  # sum by group
  data = data[,.(pop = sum(Number))
              , by = .(time = `Time section`
                       , gem = `Commune (aggregation by political district)`)]
  # convert gkz-column to 5 digits
  data$gkz = stringr::str_extract_all(string = as.character(data$gem), pattern = '<\\d{5}>')
  data$gkz = as.numeric(stringr::str_extract_all(data$gkz, '\\d{5}'))
  # return only those 3 cols
  data[,.(time, gkz, pop)]
}

```

Convert both years to the new format.

```{r convertFromStataToDataTable}
pop2002.dt = tidyPop(pop2002$tabulate())
pop2021.dt = tidyPop(pop2021$tabulate())
head(pop2002.dt)
```

### Population change

Calculate the population change in percent for each commune. First merge both pop-objects, then get the population change.

```{r popChange}
popChange = merge(pop2021.dt[,.(gkz, pop2021 = pop)]
                , pop2002.dt[,.(gkz, pop2002 = pop)]
                , all.x = TRUE)
# get codes for district and federal states from gkz for later use
popChange[, `:=` (  district = floor(gkz / 100)
                , federalstate = floor(gkz / 10000))]

communeChange = popChange[,.(gkz, pop2021, pop2002)][,diff := (pop2021 - pop2002) / pop2002][]

summary(communeChange)
```

### Add data to sf-object

The following function adds the population change data to the sf-object and also adds groups for the change value in the cut variable.

```{r functionGetAreaData}
getAreaData = function(data, sf, data.id, sf.id, breakSize = 10){
  # combine pop and sf data by ids
  d = merge(sf, data, by.x = sf.id, by.y = data.id, all.x = 'TRUE')

  # create the breaks for the new change groups
  q=breakSize
  breaks = seq(min(floor(data$diff * q) / q, na.rm = TRUE)
               , max(ceiling(data$diff * q) / q, na.rm = TRUE)
               , by = 1/q)
  breaks = round(breaks, log10(q) + 1)
  stopifnot("breakSize is too big or bad"=anyDuplicated(breaks) == 0)
  print(paste0('break groups created at: ', paste(breaks, collapse = ', ')))
  
  # create the change groups with the cut-function
  d$cut = cut(d$diff , breaks)
  d
}
```

```{r}
communeChangeShp = getAreaData(communeChange, communeShp, data.id = 'gkz', sf.id = 'id')
```

## Plot population change maps

Before we can plot the map, we need to define the colors for the cut-groups.

```{r functionGetColors}
# make popClasses with cut
getColors = function(sf){
  
  # get count of cut-groups below and above zero
  t = table(sf[sf$diff < 0,]$cut) > 0
  nNeg = length(t[t == TRUE])
  nPos = length(t[t == FALSE])
  
  col = c(
    colorRampPalette(c('darkblue', 'lightblue'))( nNeg )
    , rev(colorRampPalette(c('darkgreen', 'lightgreen'))( nPos ))
  )
  names(col) = as.character(levels(sf$cut))
  col
}
```

### ggplot map

```{r firstPlot, cache=TRUE}
ggplot() +
  geom_sf(data = communeChangeShp, aes(fill = cut), color = NA) +
  geom_sf(data = nuts2shp, color = 'black', fill = NA) +
  scale_fill_manual(values = getColors(communeChangeShp), name = 'pop rate') +
  theme_void()
```

### interactive rdeck map

For `rdeck()` all geometry types must be equal and the crs must be WGS84.

In our sf-object we have POLYGONs and MULTIPOLYGONs in , but `fdeck()` can not mix types in the same sf-object. We convert the all POLYGONs geometries to MULTIPOLYGONs with the sf function `sf::st_cast()`.

The crs of communeChangeShp is *`r sf::st_crs(communeChangeShp)$input`*. To convert to the WGS84-crs we use the function `sf::st_transform()`.

```{r tidySfForRdeck}
tidySfForRdeck = function(sf){
  # set crs
  sf = st_transform(sf, crs = st_crs(4326))
  # change all geometries to MULTIPOLYGON
  st_geometry(sf) = sf::st_cast(st_geometry(sf), "MULTIPOLYGON")
  sf
}
communeChangeShp = tidySfForRdeck(communeChangeShp)
nuts2shp = tidySfForRdeck(nuts2shp)
```

```{r rdeckMap, warning=FALSE}
communeChangeShp$change = paste0(round(communeChangeShp$diff, 2) * 100, '%')
rdeck(map_style = NULL
      , initial_bounds = sf::st_bbox(communeChangeShp)
      , theme = "light") |>
  add_polygon_layer(
    data = communeChangeShp
    , name = 'Population change'
    , get_polygon = geometry
    , get_line_width = 100
    , get_line_color = '#b1b1b1'
    , get_fill_color = scale_color_category(col = 'cut'
                                          , palette = getColors(communeChangeShp))
    , pickable = TRUE
    , tooltip = c(name, change)
  ) |>
  add_polygon_layer(
    data = nuts2shp
    , name = 'nuts2 areas'
    , get_polygon = geometry
    , get_line_width = 200
    , get_line_color = '#010101'
    , filled = FALSE
  )
```

Built with r-version `r getRversion()`
